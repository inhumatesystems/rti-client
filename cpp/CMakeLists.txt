
cmake_minimum_required(VERSION 3.5)
project(inhumaterti CXX)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
SET(CMAKE_OSX_DEPLOYMENT_TARGET 11.0)

if (NOT DEFINED BUILD_SHARED)
    set(BUILD_SHARED ON)
endif()

if(DEFINED ENV{UE5})
    set(UE5 $ENV{UE5})
    add_definitions(-DINHUMATE_UE5_BUILD)
    set(PROTOBUF_BUILD_DIR "${CMAKE_SOURCE_DIR}/protobuf/cmake-ue5-build/Release/")
else()
    if (NOT DEFINED PROTOBUF_BUILD_DIR)
        set(PROTOBUF_BUILD_DIR "${CMAKE_SOURCE_DIR}/protobuf/cmake-build/Release/")
    endif()
endif()

if(CMAKE_COMPILER_IS_GNUCXX)
    add_definitions(-fPIC -std=gnu++0x)
endif()

if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    add_definitions(-fPIC -stdlib=libc++ -std=c++11)
    if(APPLE)
        # set(EXE_LIBRARIES "-ldl -lc++abi -lm -lc -lz")
    else()
        set(EXE_LIBRARIES "-ldl -lc++ -lc++abi -lm -lc -lgcc_s -lgcc -lz")
    endif()
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /bigobj /wd4267 /wd4800 /wd4503 /wd4244 /wd4661")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /bigobj /wd4267 /wd4800 /wd4503 /wd4244 /wd4661")
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(-DWIN32)
endif()

include_directories(${CMAKE_SOURCE_DIR})

include(FindProtobuf)
find_package(Protobuf REQUIRED)
include_directories(${PROTOBUF_INCLUDE_DIR})

# Code-generation using CMake
file(GLOB PROTOS ../proto/*.proto)
if(EXISTS ${CMAKE_SOURCE_DIR}/protobuf/src)
    set(PROTOBUF_IMPORT_DIRS ${CMAKE_SOURCE_DIR}/protobuf/src)
endif(EXISTS ${CMAKE_SOURCE_DIR}/protobuf/src)
include_directories(${CMAKE_CURRENT_BINARY_DIR})

message("Protobuf: ${PROTOBUF_LIBRARIES}")

if(BUILD_SHARED)
    if (EXISTS "${PROTOBUF_BUILD_DIR}/libprotobuf.dll")
        add_definitions(-DPROTOBUF_USE_DLLS)
        add_definitions(/wd4251)
        message("Using Protobuf DLL ${PROTOBUF_BUILD_DIR}/libprotobuf.dll")
    elseif (EXISTS "${PROTOBUF_BUILD_DIR}/libprotobufd.dll")
        add_definitions(-DPROTOBUF_USE_DLLS)
        add_definitions(/wd4251)
        message("Using Protobuf DLL ${PROTOBUF_BUILD_DIR}/libprotobufd.dll")
    else()
        if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
            message("Not building shared (DLL) libraries because protobuf has no DLL")
            set(BUILD_SHARED OFF)
            if(NOT DEFINED ENV{UE5})
                string(REGEX REPLACE "/MD " "/MT " CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})
                string(REGEX REPLACE "/MDd " "/MTd " CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
            endif()
        endif()
    endif()
    protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS EXPORT_MACRO INHUMATE_RTI_PROTOS_EXPORT ${PROTOS})
else()
    if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
        string(REGEX REPLACE "/MD " "/MT " CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})
        string(REGEX REPLACE "/MDd " "/MTd " CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
    endif()
    protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS ${PROTOS})
endif()

include_directories("${CMAKE_CURRENT_SOURCE_DIR}/websocketpp")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/asio/asio/include")

set(PTHREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

if (DEFINED UE5)
    if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
        set(OPENSSL_INCLUDE_DIR "${UE5}/Engine/Source/ThirdParty/OpenSSL/1.1.1t/Include/Win64/VS2015/")
        set(OPENSSL_LIBRARIES "${UE5}/Engine/Source/ThirdParty/OpenSSL/1.1.1t/lib/Win64/VS2015/Release/libssl.lib;${UE5}/Engine/Source/ThirdParty/OpenSSL/1.1.1t/lib/Win64/VS2015/Release/libcrypto.lib;${UE5}/Engine/Source/ThirdParty/zlib/1.2.13/lib/Win64/Release/zlibstatic.lib;crypt32")
    elseif(APPLE)
        set(OPENSSL_INCLUDE_DIR "${UE5}/Engine/Source/ThirdParty/OpenSSL/1.1.1t/include/Mac")
        set(OPENSSL_LIBRARIES "${UE5}/Engine/Source/ThirdParty/OpenSSL/1.1.1t/lib/Mac/libssl.a;${UE5}/Engine/Source/ThirdParty/OpenSSL/1.1.1t/lib/Mac/libcrypto.a;${UE5}/Engine/Source/ThirdParty/zlib/1.2.13/lib/Mac/Release/libz.a")
    else()
        set(OPENSSL_INCLUDE_DIR "${UE5}/Engine/Source/ThirdParty/OpenSSL/1.1.t/include/Unix/")
        set(OPENSSL_LIBRARIES "${UE5}/Engine/Source/ThirdParty/OpenSSL/1.1.1t/lib/Unix/x86_64-unknown-linux-gnu/libssl.a;${UE5}/Engine/Source/ThirdParty/OpenSSL/1.1.1t/lib/Unix/x86_64-unknown-linux-gnu/libcrypto.a;-lpthread")
        link_directories("${UE5}/Engine/Source/ThirdParty/zlib/1.2.13/lib/Unix/x86_64-unknown-linux-gnu/Release/")
        include_directories("${UE5}/Engine/Source/ThirdParty/Unix/LibCxx/include/c++/v1")
        link_directories("${UE5}/Engine/Source/ThirdParty/Unix/LibCxx/lib/Unix/x86_64-unknown-linux-gnu")
    endif()
else()
    if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC" AND CMAKE_CXX_COMPILER_ARCHITECTURE_ID MATCHES "x64" AND EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/openssl-1.1")
        set(OPENSSL_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/openssl-1.1/x64/include")
        set(OPENSSL_LIBRARIES "${CMAKE_CURRENT_SOURCE_DIR}/openssl-1.1/x64/lib/libssl.lib;${CMAKE_CURRENT_SOURCE_DIR}/openssl-1.1/x64/lib/libcrypto.lib")
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "MSVC" AND CMAKE_CXX_COMPILER_ARCHITECTURE_ID MATCHES "X86" AND EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/openssl-1.1")
        set(OPENSSL_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/openssl-1.1/x86/include")
        set(OPENSSL_LIBRARIES "${CMAKE_CURRENT_SOURCE_DIR}/openssl-1.1/x86/lib/libssl.lib;${CMAKE_CURRENT_SOURCE_DIR}/openssl-1.1/x86/lib/libcrypto.lib")
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "MSVC" AND CMAKE_CXX_COMPILER_ARCHITECTURE_ID MATCHES "X86" AND EXISTS "c:/program files (x86)/openssl-win32")
        set(OPENSSL_INCLUDE_DIR "c:/program files (x86)/openssl-win32/include")
        set(OPENSSL_LIBRARIES "c:/program files (x86)/openssl-win32/lib/libssl.lib;c:/program files (x86)/openssl-win32/lib/libcrypto.lib")
    else()
        find_package(OpenSSL REQUIRED)
    endif()
endif()

include_directories(${OPENSSL_INCLUDE_DIR})

message("OpenSSL: ${OPENSSL_INCLUDE_DIR} ${OPENSSL_LIBRARIES}")

# Static
add_library(inhumaterti STATIC inhumaterti.cpp ${PROTO_SRCS})
target_compile_definitions(inhumaterti PRIVATE "INHUMATE_RTI_PROTOS_EXPORT=")

file(GLOB TEST_SRCS test/*.cpp)
add_executable(inhumaterti_test ${TEST_SRCS})
target_link_libraries(inhumaterti_test inhumaterti Threads::Threads ${PROTOBUF_LIBRARIES} ${OPENSSL_LIBRARIES} ${EXE_LIBRARIES})

add_executable(usage_example usage_example.cpp)
target_link_libraries(usage_example inhumaterti Threads::Threads ${PROTOBUF_LIBRARIES} ${OPENSSL_LIBRARIES} ${EXE_LIBRARIES})

# Shared
if (BUILD_SHARED)
    add_library(inhumaterti_shared_protos SHARED ${PROTO_SRCS})
    if (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
        target_compile_definitions(inhumaterti_shared_protos PRIVATE "INHUMATE_RTI_PROTOS_EXPORT=__declspec(dllexport)")
    else()
        target_compile_definitions(inhumaterti_shared_protos PRIVATE "INHUMATE_RTI_PROTOS_EXPORT=")
    endif()
    target_link_libraries(inhumaterti_shared_protos ${PROTOBUF_LIBRARIES})

    add_library(inhumaterti_shared SHARED inhumaterti.cpp)
    target_compile_definitions(inhumaterti_shared PRIVATE INHUMATE_RTI_SHARED=1)
    target_link_libraries(inhumaterti_shared inhumaterti_shared_protos Threads::Threads ${PROTOBUF_LIBRARIES} ${OPENSSL_LIBRARIES})

    #add_executable(inhumaterti_test_shared test.cpp)
    #target_compile_definitions(inhumaterti_test_shared PRIVATE INHUMATE_RTI_SHARED=1)
    #target_link_libraries(inhumaterti_test_shared inhumaterti_shared inhumaterti_shared_protos ${EXE_LIBRARIES})
endif()

#add_executable(websocketpp_test websocketpp_test.cpp)
#target_link_libraries(websocketpp_test Threads::Threads ${OPENSSL_LIBRARIES})